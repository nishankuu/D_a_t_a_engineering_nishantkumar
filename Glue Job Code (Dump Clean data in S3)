This is Glue Job Code that was generated by AWS Visual ETL Console. 
Some edit to the code were added to add partitions(Region) and also drop some files(Predicate Pushdown) that belong to non English speaking Regions.
We have to additionally encode other non english language into machine level code to process this data.



import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality

from awsglue.dynamicframe import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""
predicate_pushdown = "region in ('ca','gb','us')"
# Script generated for node Amazon S3

AmazonS3_node1742047028186 = glueContext.create_dynamic_frame.from_catalog(database = "nishanku_youtube_database", table_name = "raw_statistics", transformation_ctx = "AmazonS3_node1742047028186", push_down_predicate = predicate_pushdown)

# Script generated for node Change Schema
ChangeSchema_node1742047296512 = ApplyMapping.apply(frame=AmazonS3_node1742047028186, mappings=[("video_id", "string", "video_id", "string"), ("trending_date", "string", "trending_date", "string"), ("title", "string", "title", "string"), ("channel_title", "string", "channel_title", "string"), ("category_id", "long", "category_id", "long"), ("publish_time", "string", "publish_time", "string"), ("tags", "string", "tags", "string"), ("views", "long", "views", "long"), ("likes", "long", "likes", "long"), ("dislikes", "long", "dislikes", "long"), ("comment_count", "long", "comment_count", "long"), ("thumbnail_link", "string", "thumbnail_link", "string"), ("comments_disabled", "string", "comments_disabled", "boolean"), ("ratings_disabled", "string", "ratings_disabled", "boolean"), ("video_error_or_removed", "string", "video_error_or_removed", "boolean"), ("description", "string", "description", "string"),("region", "string", "region", "string")], transformation_ctx="ChangeSchema_node1742047296512")
resolvechoice2 = ResolveChoice.apply(frame = ChangeSchema_node1742047296512, choice = "make_struct", transformation_ctx = "resolvechoice2")

dropnullfields3 = DropNullFields.apply(frame = resolvechoice2, transformation_ctx = "dropnullfields3")

datasink1 = dropnullfields3.toDF().coalesce(1)
df_final_output = DynamicFrame.fromDF(datasink1, glueContext, "df_final_output")

# Script generated for node Amazon S3
EvaluateDataQuality().process_rows(frame=df_final_output, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1742046882693", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})

AmazonS3_node1742047827231 = glueContext.write_dynamic_frame.from_options(frame=df_final_output, connection_type="s3", connection_options={"path": "s3://nishanku-cleaned-version-youtube/youtube_1/", "partitionKeys": ["region"]}, format = "parquet", transformation_ctx="AmazonS3_node1742047827231")

job.commit()
